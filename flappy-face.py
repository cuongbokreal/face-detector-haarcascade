import cv2
#import numpy as np
import random
#import math
import time
import pyautogui #ƒë·ªÉ press tho√°t game :))
from termcolor import colored
#import keyboard

#============================================================
#os cd folder terminal !!! Kh√¥ng ch·ªânh s·ª≠a!!!
import os
#target_path c·∫ßn ƒë∆∞·ª£c tr·ªè ƒë√∫ng folder ch·ª©a file python
target_path = r"C:\Users\NGOC DUNG\OneDrive - Hanoi University of Mining and Geology\A_HUMG_code\KHDL\btl"
current_path = os.getcwd()
if current_path != target_path:
    try:
        os.chdir(target_path)
        print(f"ƒê√£ chuy·ªÉn ƒë·∫øn {target_path}")
    except FileNotFoundError:
        print(f"Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n: {target_path}")
    except PermissionError:
        print(f"Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë·∫øn {target_path}")
else:
    print("ƒê√£ ·ªü trong ƒë√∫ng th∆∞ m·ª•c.")
print('\n')
#============================================================


#update: tƒÉng d·∫ßn t·ªëc ƒë·ªô 
'''
#ƒë·ªÉ con tr·ªè chu·ªôt t·∫°i ƒë√¢y 

'''

# Hi·ªÉn th·ªã th√¥ng b√°o
pyautogui.alert('''
Flappy Face üôÇ ƒë∆∞·ª£c t·∫°o ra d·ª±a tr√™n t·ª±a game Flappy Bird üê¶, s·ª≠ d·ª•ng Cascade Classifier haarcascade_frontalface_default (Nh·∫≠n di·ªán khu√¥n m·∫∑t). Ng∆∞·ªùi ch∆°i s·ª≠ d·ª•ng khu√¥n m·∫∑t c·ªßa m√¨nh ƒë·ªÉ di chuy·ªÉn qua c√°c ch∆∞·ªõng ng·∫°i v·∫≠t sao cho √¥ vu√¥ng ƒë·ªè (khu√¥n m·∫∑t) kh√¥ng ch·∫°m v√†o ch∆∞·ªõng ng·∫°i v·∫≠t, khi ƒë√≥ s·∫Ω ƒë∆∞·ª£c +1 ƒëi·ªÉm v√† t·ªëc ƒë·ªô ch·∫°y c≈©ng ƒë∆∞·ª£c tƒÉng. Ch∆°i ƒë·∫øn 999 ƒëi·ªÉm s·∫Ω c√≥ ƒëi·ªÅu b·∫•t ng·ªù üòò
\nKhi ch∆°i c√≥ v√†i l∆∞u √Ω sau ƒë√¢y:
1. T·∫Øt Vietkey hihihi 
2. ƒê·ªÉ tr·∫£i ngh·ªám t·ªët nh·∫•t h√£y ch∆°i ·ªü n·ªÅn tr·∫Øng (d·ªÖ nh·∫≠n di·ªán m·∫∑t, √≠t b·ªã nh·∫ßm) 
3. Nh·∫•n ph√≠m q ƒë·ªÉ tho√°t (ho·∫∑c ch∆°i thua hehe) 
4. T·ªëc ƒë·ªô tƒÉng d·∫ßn, c√†ng nhi·ªÅu ƒëi·ªÉm ch∆°i c√†ng kh√≥
\nL√†m h·∫øt r·ªìi th√¨ nh·∫•n OK ƒë·ªÉ ch∆°i nha
\n\n===================================
*Th√¥ng tin nh√≥m:
1. Nguy·ªÖn Ng·ªçc C∆∞·ªùng
2. Tr·∫ßn Minh C∆∞·ªùng
3. Nguy·ªÖn Danh Duy
\n*Source: https://github.com/cuongbokreal/face-detector-haarcascade
''', 'Gi·ªõi thi·ªáu v·ªÅ Flappy Face üôÇ - Nh√≥m Xe TƒÉng (KHDL K68 HUMG)')

# K√≠ch th∆∞·ªõc c·ª≠a s·ªï tr√≤ ch∆°i
window_width, window_height = 800, 600
#min_width: 600
#min_height: 400

# M·ªü k·∫øt n·ªëi v·ªõi webcam v√† set k√≠ch th∆∞·ªõc frame
print(colored('\nƒêang k·∫øt n·ªëi Webcam...', 'red', attrs=['bold']))
cap = cv2.VideoCapture(0)
cap.set(3, window_width)  # 3 l√† m√£ cho chi·ªÅu r·ªông frame
cap.set(4, window_height)  # 4 l√† m√£ cho chi·ªÅu cao frame
print(colored('ƒê√£ k·∫øt n·ªëi Webcam!', 'green', attrs=['bold']))

# T·∫°o Cascade Classifier ƒë·ªÉ nh·∫≠n di·ªán khu√¥n m·∫∑t
faceCascade = cv2.CascadeClassifier("module/haarcascade_frontalface_default.xml")

#pau game
pause = False
#t·ªëc ƒë·ªô di chuy·ªÉn c·ªßa ch∆∞·ªõng ng·∫°i v·∫≠t (px)
speed = 5

#size ch∆∞·ªõng ng·∫°i v·∫≠t (chi·ªÅu ngang px)
obstacle_size = 150

# Font v√† k√≠ch th∆∞·ªõc vƒÉn b·∫£n
font = cv2.FONT_HERSHEY_SIMPLEX
font_size = 1
font_color = (255, 255, 255)
font_thickness = 2

# ƒêi·ªÉm s·ªë
score = 0
#bi·∫øn t√≠nh to√°n score
cal_score = 1

#Fix ch∆∞·ªõng ng·∫°i v·∫≠t gen ra s√°t ƒë·ªânh ho·∫∑c ƒë√°y (px)
fix_random_obstacles = 100

#resize cho khung ƒë·ªè khu√¥n m·∫∑t nh·ªè h∆°n (px)
resize_rectangle_face = 15

data_obstacles = [
    {
        'x':window_width,
        'y': random.randint(0, window_height - obstacle_size - fix_random_obstacles),
        'score': cal_score
    }
] #m·∫£ng th√¥ng tin ch·ª©a x, y kho·∫£ng c√°ch an to√†n c·ªßa ch∆∞·ªõng ng·∫°i v·∫≠t (g√≥c b√™n tr√°i d∆∞·ªõi c√πng c·ªßa √¥ tr√™n)
#sau ƒë√≥ for loop ƒë·ªÉ v·∫Ω ra, m·ªói l·∫ßn for c·ªßa face di chuy·ªÉn x -= 1
#ch∆∞·ªõng ng·∫°i v·∫≠t ƒëi t·ª´ b√™n ph·∫£i sang: window_width => 0 
#for loop: sinh th√™m ch∆∞·ªõng ng·∫°i v·∫≠t khi cnv tr∆∞·ªõc window_width - 200
def resetGame(e):
    print(e)
    global pause
    global speed
    global score
    global cal_score
    global data_obstacles
    pause = False
    speed = 5
    score = 0
    cal_score = 1
    data_obstacles = [
        {
            'x':window_width,
            'y': random.randint(0, window_height - obstacle_size - fix_random_obstacles),
            'score': cal_score
        }
    ]
'''

'''
print(colored('B·∫Øt ƒë·∫ßu game!!!', 'green', attrs=['bold']))
while True:
    # ƒê·ªçc frame t·ª´ webcam
    ret, frame = cap.read()
    frame = cv2.flip(frame, 1) #l·∫≠t ng∆∞·ª£c l·∫°i cam

    # Chuy·ªÉn ƒë·ªïi ·∫£nh sang ·∫£nh ƒëen tr·∫Øng ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Nh·∫≠n di·ªán khu√¥n m·∫∑t trong ·∫£nh ƒëen tr·∫Øng
    faces = faceCascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=5,
        minSize=(30, 30)
    )

    # V·∫Ω h√¨nh ch·ªØ nh·∫≠t xung quanh khu√¥n m·∫∑t
    for (x, y, w, h) in faces:
        #setting cho khung ƒë·ªè nh·ªè h∆°n, d·ªÖ ch∆°i h∆°n
        x += resize_rectangle_face
        y += resize_rectangle_face
        w -= (resize_rectangle_face +10) 
        h -= (resize_rectangle_face +10)
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 255), 2)
        for data_obstacle in data_obstacles: #v·∫Ω c√°c ch∆∞·ªõng ng·∫°i v·∫≠t
            #√¥ tr√™n
            cv2.rectangle(frame, (data_obstacle['x'], 0), (data_obstacle['x'] + obstacle_size, data_obstacle['y']), (0, 255, 0), -1)
            #√¥ d∆∞·ªõi
            cv2.rectangle(frame, (data_obstacle['x'], data_obstacle['y'] + obstacle_size), (data_obstacle['x'] + obstacle_size, window_height), (0, 255, 0), -1)
            
            #tr∆∞·ªùng h·ª£p ƒëi qua cnv
            if (x in range(data_obstacle['x'], data_obstacle['x']+(speed * 2))) and (y in range(data_obstacle['y'], data_obstacle['y']+obstacle_size) and score < data_obstacle['score']):
                #set score
                score = data_obstacle['score']
                #t·∫°o chuong ngai vat
                cal_score = score +1
                speed += 1 #tƒÉng speed, tƒÉng ƒë·ªô kh√≥ cho game :)
                print(f'Score: {score}')
                #print(cal_score)
                data_obstacles.append(
                    {
                        'x':window_width,
                        'y': random.randint(0, window_height - obstacle_size - fix_random_obstacles),
                        'score': cal_score
                    }
                )
            
            elif data_obstacle['x'] <= speed: #g·∫ßn h·∫øt (c√°ch m√©p tr√°i speed px th√¨ x√≥a lu√¥n ch∆∞·ªõng ng·∫°i v·∫≠t ƒë√≥)
                data_obstacles.remove(data_obstacle)
            else:
                data_obstacle['x'] -= speed #n·∫øu ch∆∞a ƒëi h·∫øt th√¨ di chuy·ªÉn n√≥ sang tr√°i theo speed

            #tr∆∞·ªùng h·ª£p ƒë·ª•ng tr√∫ng cnv (handle )
            '''if ((x in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and (y in range(0, data_obstacle['y']))) or \
                  (x in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and (y in range(data_obstacle[y]+obstacle_size, window_height)))):
            '''
            if ( #g√≥c tr√™n b√™n tr√°i
                (x in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y in range(0, data_obstacle['y'])) or
                (x in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y in range(data_obstacle['y'] + obstacle_size, window_height))
            ) or ( #g√≥c tr√™n b√™n ph·∫£i, ch·ªâ c·∫ßn ch·ªânh s·ª≠a bi·∫øn x, y => g√≥c m·ªõi
                (x+w in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y in range(0, data_obstacle['y'])) or
                (x+w in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y in range(data_obstacle['y'] + obstacle_size, window_height))
            ) or( #g√≥c d∆∞·ªõi b√™n tr√°i
                (x in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y+h in range(0, data_obstacle['y'])) or
                (x in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y+h in range(data_obstacle['y'] + obstacle_size, window_height))
            ) or ( #g√≥c d∆∞·ªõi b√™n ph·∫£i
                (x+w in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y+h in range(0, data_obstacle['y'])) or
                (x+w in range(data_obstacle['x'], data_obstacle['x'] + obstacle_size) and
                y+h in range(data_obstacle['y'] + obstacle_size, window_height))
            ):
                print(colored(f'ƒê·ª•ng tr√∫ng ch∆∞·ªõng ng·∫°i v·∫≠t, ƒëi·ªÉm s·ªë c·ªßa b·∫°n l√†: {score}', 'red', attrs=['bold']))
                
                #setting l·∫°i game
                speed = 0
                data_obstacles = []
                print('Nh·∫•n ph√≠m b·∫•t k√¨ ƒë·ªÉ ch∆°i l·∫°i')
                pause = True

                # Nh·∫•n ph√≠m "q"
                # pyautogui.press('q')
                # pyautogui.press('enter')
                # pyautogui.alert(f'S·ªë ƒëi·ªÉm c·ªßa b·∫°n l√† {score}', 'K·∫øt qu·∫£')
                #break

    if pause == True: #N·∫øu game ƒëang d·ª´ng (set pause = True khi ch·∫°m cnv)
    # Ki·ªÉm tra xem c√≥ s·ª± ki·ªán nh·∫•n ph√≠m n√†o kh√¥ng
        #int(window_width-font_size)//2, int(window_height-font_size)//2
        cv2.putText(frame, f"Diem so cua ban: {score}", (180,125), font, 0.75, [255,0,0], font_thickness)
        cv2.putText(frame, f"Nhan phim bat ky de choi lai, ESC hoac Q de thoat", (50,150), font, 0.65, [255,0,0], font_thickness)
        key = cv2.waitKey(10)#waitkey trong 10 mili s
        if key == 27 or key == 113:  # 27 Esc, 113 q
            break
        elif key!=-1:
            resetGame('Ch∆°i l·∫°i')
    #n·ªÅn cho score
    cv2.rectangle(frame, (0, 0), (175, 50), (135,135,135), -1)
    # Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë l√™n frame
    cv2.putText(frame, f"Score: {score}", (10, 30), font, font_size, font_color, font_thickness)
    # Copyright =))
    cv2.putText(frame, f"BTL KHDL", (10, 200), font, font_size, font_color, font_thickness)

    # Hi·ªÉn th·ªã frame k·∫øt qu·∫£
    cv2.imshow('Flappy Face - Cuongbok', frame)

    # Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu nh·∫•n ph√≠m 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    time.sleep(0.02) #delay time cho ƒë·ª° lag

# Gi·∫£i ph√≥ng t√†i nguy√™n sau khi k·∫øt th√∫c
cap.release()
cv2.destroyAllWindows()